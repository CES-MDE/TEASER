---- General Building Information ----

building name = ${bldg.name} - 
building type = ${bldg.type_of_building} - 
building year of construction = ${bldg.year_of_construction} - 
building number of floors = ${bldg.number_of_floors} m
building height of floors = ${bldg.height_of_floors} - 
building net leased area = ${bldg.net_leased_area} m²

static heat load = ${round_2(bldg.sum_heating_load)} W
static cooling load = 0

number of thermal zones = ${get_n(bldg.thermal_zones)} - 

%for zone in bldg.thermal_zones:
---- ${zone.name} ----

    ${zone.name} area = ${zone.area} m²
    ${zone.name} volume = ${zone.volume} m³

  * Activity, usage and systems engineering *

    number of people in the zone = ${zone.use_conditions.persons} - (NrPeople)
    number of people with machines = ${zone.use_conditions.machines} -  (NrPeopleMachines)
    heating power of lighting = ${zone.use_conditions.lighting_power} W (LightingPower)
    ## Ratio of convective heat from overall heat output = 0.5 (RatioConvectiveHeatLighting)
    upper limit of heater = ${round_2(zone.heating_load)} W (h_heater)
    minimum specific air flow supplied by the AHU = ${zone.use_conditions.min_ahu} m³/(h m²) (minAHU)
    maximum specific air flow supplied by the AHU = ${zone.use_conditions.max_ahu} m³/(h m²) (maxAHU)
    ## AHU functionality = ${on_off_checker(zone.use_conditions.with_ahu)} - (withAHU)
    ## lower limit of cooler = 0 W #hardcoded, unimportant? (l_cool)
    ## total energy transmittance = ${round_2(zone.weighted_g_value)} - (g)

  * Windows *

    energy transmittances if sunblind is closed = ${sunblind_string(zone.windows)} - (gsunblind)
    list of window areas = ${area_string(zone.windows)} - (Aw)
    windows functionality = ${on_off_checker(zone.windows)} - (withWindows)
    ## fixme = ${weightfactors_to_string(zone.weightfactor_win)} - (weightfactorswindow)

  * Inner Walls *

    inner wall area = ${round_2(zone.area_iw)} m² (Ai)
    inner wall's coefficient of heat transfer = ${round_2(zone.alpha_conv_iw)} W/(m² K) (alphaiwi)
    ## inner walls functionality = ${on_off_checker(zone.inner_walls)} - (withInnerwalls)
    resistor 1 inner wall = ${zone.r1_iw} K/W (R1i)
    capacity 1 inner wall = ${round_2(zone.c1_iw)} J/K  (C1i)

  * Outer Walls *

    outer wall area = ${round_2(zone.area_ow)} m² (Ao)
    outer wall's coefficient of absorption = 0.7 - (aowo) 
    outer wall's coefficient of heat transfer (inner side) = ${round_2(zone.alpha_conv_inner_ow)} W/(m² K)  (alphaowi)
    outer wall's coefficient of heat transfer (outer side) = ${round_2(zone.alpha_comb_outer_ow)} W/(m² K) (alphaowo)
    ## fixme = ${weightfactors_to_string(zone.weightfactor_ow)} - (weightfactorswall)
    ## fixme = ${weightfactors_to_string(zone.weightfactor_ground)} - (weightfactorground)
    ## outer walls functionality = ${on_off_checker(zone.outer_walls)} - (withOuterwalls)
    resistor 1 outer wall = ${zone.r1_ow} K/W (R1o)
    capacity 1 outer wall = ${round_2(zone.c1_ow)} J/K  (C1o)
    resistor "Rest" = ${round_2(zone.r_rest_ow)} K/W (RRest)


%endfor

##get n
<%def name="get_n(list)", filter="trim">
  <%
  n=0
  for element in list:
    if type(element).__name__ == "ThermalZone":
      n += 1
    else:
      pass
  return n
  %>
</%def>

##round float 2 dezimal
<%def name="round_2(float)", filter="trim">
  <%
  return round(float,2)
  %>
</%def>

##on off checker
<%def name="on_off_checker(state)", filter="trim">
  <%
  if state == True:
    return "On"
  else:
    return "Off"
  %>
</%def>

##convert sunblind to string
<%def name="sunblind_string(list)", filter="trim">
  <%
  help = "["
  for element in list:
    if len(help) == 1:
      help += str(element.shading_g_total)
    else:
      help += ", " + str(element.shading_g_total)
  help += ", 0]"
  help = help.replace("[", "{").replace("]", "}")
  return help
  %>
</%def>

##convert areas to string
<%def name="area_string(list)", filter="trim">
  <%
  help = "["
  for element in list:
    if len(help) == 1:
      help += str(element.area)
    else:
      help += ", " + str(element.area)
  help += ", 0]"
  help = help.replace("[", "{").replace("]", "}")
  return help   
  %>
    
</%def>

##check if element is existent
<%def name="element_check(element)", filter ="trim">
  <%
  if len(element)!= 0:
    return "true"
  else:
    return "false"
  %>
</%def>

##convert the weightfactors
<%def name="weightfactors_to_string(list)", filter="trim"> 
  <%
  help = []
  for item in list:
    help.append(item)
    
  return help    
  %>
</%def>
