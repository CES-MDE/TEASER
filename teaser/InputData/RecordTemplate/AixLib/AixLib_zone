record ${bldg.name}_${zone.name} "${bldg.name}_${zone.name}"
  extends AixLib.DataBase.Buildings.ZoneBaseRecord(
    n = ${get_n(zone.outer_walls)},
    Heater_on = true,
    Cooler_on = false,
    l_cooler = 0,
    RatioConvectiveHeatLighting = ${
    	zone.use_conditions.ratio_conv_rad_lighting},
    zoneID = "${zone.name}",
    usage = "${zone.use_conditions.usage}",
    RoomArea = ${zone.area},
    Vair = ${zone.volume},
    minAHU = ${zone.use_conditions.min_ahu},
    maxAHU = ${zone.use_conditions.max_ahu},
    withAHU = ${get_false(zone.use_conditions.with_ahu)},
    alphaiwi = ${zone.alpha_comb_iw},
    alphaowi = ${zone.alpha_comb_inner_ow},
    alphaowo = ${zone.alpha_comb_outer_ow},
    g = ${zone.weighted_g_value},
    NrPeople = ${zone.use_conditions.persons},
    NrPeopleMachines = ${zone.use_conditions.machines},
    LightingPower = ${zone.use_conditions.lighting_power},
    h_heater = ${zone.heating_load},
    gsunblind = {${sunblind_string(zone.windows)}},
    Aw = {${area_string(zone.windows)}},
    withWindows = ${element_check(zone.windows)},
    weightfactorswindow = {${weightfactor_to_string(zone.weightfactor_win)}},
    weightfactorswall = {${weightfactor_to_string(zone.weightfactor_ow)}},
    weightfactorground = ${weightfactor_to_string(zone.weightfactor_ground)},
    Ai = ${zone.area_iw},
    withInnerwalls = ${element_check(zone.inner_walls)},
    R1i = ${zone.r1_iw},
    C1i = ${zone.c1_iw},
    RWin = ${zone.r1_win},
    alphaConvWinOuter = ${zone.alpha_conv_outer_win},
    alphaConvWinInner = ${zone.alpha_conv_inner_win},
    Ao = ${zone.area_ow},
    withOuterwalls = ${element_check(zone.outer_walls)},
    R1o = ${zone.r1_ow},
    RRest = ${zone.r_rest_ow},
    C1o = ${zone.c1_ow},
    ActivityTypePeople = ${zone.use_conditions.activity_type_persons},
    RatioConvectiveHeatPeople = ${zone.use_conditions.ratio_conv_rad_persons},
    ActivityTypeMachines = ${zone.use_conditions.activity_type_machines},
    RatioConvectiveHeatMachines = ${
    	zone.use_conditions.ratio_conv_rad_machines},
    rhoair = ${bldg.density_air},
    cair = ${bldg.heat_capac_air},

    temperatureground = ${zone.t_ground},

    awin = ${get_g_trans(zone.windows)},


	aowo = 0.7,    
    epso = 0.9, ## calculation of emissivity could be done with Baehr P.32 (1.65) or set to 0.9 in the material? or thermal zone?
    epsi = 0.9, ## calculation of emissivity could be done with Baehr P.32 (1.65) or set to 0.9 in the material? or thermal zone?
    epsw = 0.9, ## calculation of emissivity could be done with Baehr P.32 (1.65) or set to 0.9 in the material? or thermal zone?

    T0all = 273.15 + 20.1,

    Imax = 200,
    splitfac = 0);

end ${bldg.name}_${zone.name};

##get n
<%def name="get_n(list)", filter="trim">
	<%
	n=0
	for element in list:
		if type(element).__name__ == "OuterWall" or type(element).__name__ == "Rooftop":
			n += 1
		else:
			pass
	return n
	%>
</%def>

##convert sunblind to string
<%def name="sunblind_string(list)", filter="trim">
	<%
	i = 0
	length = max(len(zone.weightfactor_ow),len(zone.weightfactor_win))
	
	string_of_list = ""
	for i in range(length):
		if i+1 < length:
			if string_of_list == "":
				string_of_list += str(list[i].shading_g_total) 
			else:
				string_of_list += ", "  + str(list[i].shading_g_total) 
		else:
			string_of_list += ", " + str(0)
		i += 1
	return string_of_list	
	%>
</%def>

##convert areas to string
<%def name="area_string(list)", filter="trim">
	<%
		
		
		length = max(len(zone.weightfactor_ow),len(zone.weightfactor_win))
		orientation_area = {}
		
		for item in list:
			orientation_area[item.orientation] = item.area
		
		string_of_list = ""
		for key in orientation_area:
			
			if string_of_list == "":
				string_of_list += str(orientation_area[key]) 
			else:
				string_of_list += ", "  + str(orientation_area[key])  
		if len(orientation_area) < length:
			string_of_list += ", "+ str(0)
		else:
			pass	
			
		return string_of_list
	%>
		
</%def>


##check if element is existent
<%def name="element_check(element)", filter ="trim">
	<%
	if len(element)!= 0:
		return "true"
	else:
		return "false"
	%>
</%def>

##convert the weightfactors into list of strings
<%def name="weightfactor_to_string(list)", filter="trim"> 
	<%
	i = 0
	string_of_list = ""
	
	while i < len(list):
		
		if string_of_list == "":
			string_of_list += str(list[i]) 
		else:
			string_of_list += ", "  + str(list[i]) 
		i += 1
	
	return string_of_list
	%>
</%def>

##get false
<%def name="get_false(value)", filter="trim">
  <%
  if value == False:
    return "false"
  else:
  	return value
  %>
</%def>

##get average transmission from g_values do we consider reflextion?
<%def name="get_g_trans(list)", filter="trim">
  <%
  ## g_vals = [window.g_value for window in list]
  ## average = sum(g_vals) / float(len(g_vals))
  ## return str(1-average)
  %>
</%def>

<%def name="get_emittance(list)", filter="trim">
  <%
## Here we should return the coefficient of emittance of the given outerwall,
## innerwall and window list
  %>
</%def>
