<%namespace file="/modelica_language/" import="get_true_false"/>
<%namespace file="/conversion/" import="deg_to_rad"/>
within ${zone.parent.parent.name}.${zone.parent.name}.${zone.parent.name}_DataBase;
record ${zone.parent.name}_${zone.name} "${zone.parent.name}_${zone.name}"
  extends AixLib.DataBase.ThermalZones.ZoneBaseRecord(
    T_start = ${zone.t_inside},
    withAirCap = ${get_true_false(zone.consider_air_capacity)},
    VAir = ${zone.volume},
    AZone = ${zone.area},
    alphaRad = ${zone.model_attr.alpha_rad_inner_mean},
    lat = ${deg_to_rad(zone.parent.latitude)},
    nOrientations = ${zone.model_attr.n_outer},
    AWin = ,
    ATransparent = ,
    alphaWin = ${zone.model_attr.alpha_conv_inner_win},
    RWin = ,
    gWin = ${zone.model_attr.weighted_g_value},
    UWin= ${zone.ua_value_win/zone.area_win},
    ratioWinConRad = ${zone.model_attr.ratio_conv_rad_inner_win},
    AExt = ,
    alphaExt = ${zone.alpha_conv_inner_ow},
    nExt = 1,
    RExt = {${zone.model_attr.r1_ow}},
    RExtRem = ,
    CExt = {${zone.model_attr.c1_ow}},
	AInt = ${zone.model_attr.area_iw},
    alphaInt = ${zone.model_attr.alpha_conv_inner_iw},
    nInt = 1,
    RInt = {${zone.model_attr.r1_iw}},
    CInt = {${zone.model_attr.c1_iw}},
    AFloor = 0.0,
    alphaFloor = 0.0,
    nFloor = 1,
    RFloor = {0.00001},
    RFloorRem =  0.00001,
    CFloor = {0.00001},
	ARoof = 0.0,
    alphaRoof = 0.0,
    nRoof = 1,
    RRoof = {0.00001},
    RRoofRem = 0.00001,
    CRoof = {0.00001},
    nOrientationsRoof = 0,
    tiltRoof = {0.0},
    aziRoof = {0.0},
    wfRoof = {0.0},
    aRoof = 0.0,
    aExt = ${zone.model_attr.solar_absorp_ow},
    TSoil = ${zone.t_ground},
    alphaWallOut = ${zone.model_attr.alpha_conv_outer_ow},
    alphaRadWall = ${(zone.model_attr.alpha_rad_outer_mean},
    alphaWinOut = ${zone.model_attr.alpha_conv_outer_win},
    alphaRoofOut = ${zone.model_attr.alpha_conv_outer_rt},
    alphaRadRoof = ${zone.model_attr.alpha_rad_outer_rt},
    tiltExtWalls = {${list_to_string(deg_to_rad_list(add_gf_list(zone.tilt_wall,zone.area_gf,number_of_elements)))}},
    aziExtWalls = {${list_to_string(deg_to_rad_list(add_gf_list(get_azimut(zone.orientation_wall),zone.area_gf,number_of_elements)))}},
    wfWall = {${list_to_string(add_gf_list(zone.weightfactor_ow,zone.area_gf,number_of_elements))}},
    wfWin = {${list_to_string(add_gf_list(zone.weightfactor_win,zone.area_gf,number_of_elements))}},
    wfGro = ${list_to_string(zone.weightfactor_ground)},
    nrPeople = ${zone.use_conditions.persons},
    ratioConvectiveHeatPeople = ${zone.use_conditions.ratio_conv_rad_persons},
    nrPeopleMachines = ${zone.use_conditions.machines},
    ratioConvectiveHeatMachines = ${zone.use_conditions.ratio_conv_rad_machines},
    lightingPower = ${zone.use_conditions.lighting_power},
    ratioConvectiveHeatLighting = ${zone.use_conditions.ratio_conv_rad_lighting},
    useConstantACHrate = ${str(get_true_false(zone.use_conditions.use_constant_ach_rate))},
    baseACH = ${zone.infiltration_rate},
    maxUserACH = ${zone.use_conditions.max_user_ach},
    maxOverheatingACH = ${str(zone.use_conditions.max_overheating_ach).replace('[', '{').replace(']', '}')},
    maxSummerACH = ${str(zone.use_conditions.max_summer_ach).replace('[', '{').replace(']', '}')},
    winterReduction = ${str(zone.use_conditions.winter_reduction).replace('[', '{').replace(']', '}')},
    withAHU = ${get_true_false(zone.use_conditions.with_ahu)},
    minAHU = ${str(zone.use_conditions.min_ahu)},
    maxAHU = ${str(zone.use_conditions.max_ahu)},
    hHeat = ${zone.heating_load},
    lHeat = 0,
    KRHeat = 10000,
    TNHeat = 1,
    HeaterOn = true,
    hCool = 0,
    lCool = ${zone.cooling_load},
    KRCool = 10000,
    TNCool = 1,
    CoolerOn = false);
end ${bldg.name}_${zone.name};
